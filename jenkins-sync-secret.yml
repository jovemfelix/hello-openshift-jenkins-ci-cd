kind: Template
apiVersion: v1
labels:
  template: jenkins-sync-pipeline-template-v1
message: A new pipeline was created
metadata:
  annotations:
    description: Sync Secret with Jenkins Pipeline
    iconClass: icon-eap
    openshift.io/display-name: Sync Secret with Jenkins
    openshift.io/provider-display-name: Renato Felix
    tags: template,cicd,jenkins
    template.openshift.io/documentation-url: https://github.com/openshift/jenkins-sync-plugin
    template.openshift.io/long-description: This template will create the resources neeed to create jenkins pipeline and sync credentials
    template.openshift.io/support-url: https://access.redhat.com
    version: 1.0.2
  name: "${APPLICATION_NAME}"
objects:
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      annotations:
        pipeline.alpha.openshift.io/uses: '[{"name": "${APPLICATION_NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
        description: Pipeline with credentials
      labels:
        application: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}-pipeline
      name: ${APPLICATION_NAME}-pipeline
    spec:
      strategy:
        jenkinsPipelineStrategy:
          env:
            - name: SOURCE_REPOSITORY_URL
              value: ${APPLICATION_SOURCE_REPOSITORY_URL}
            - name: SOURCE_REPOSITORY_REF
              value: ${APPLICATION_SOURCE_REPOSITORY_REF}
            - name: SOURCE_CREDENTIAL_ID
              value: ${APPLICATION_SOURCE_CREDENTIAL_ID}
          jenkinsfile: |-
            try {
              timeout(time: 4, unit: 'MINUTES') {
                def project = ""
                def sourceUrl = ""
                def sourceRef = ""
                def sourceCredentialId = ""

                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                    sourceCredentialId = project + "-" + env.SOURCE_CREDENTIAL_ID
                    sourceRef = env.SOURCE_REPOSITORY_REF
                    sourceUrl = env.SOURCE_REPOSITORY_URL

                    echo "Using project: ${project}"
                    echo "Using sourceUrl: ${sourceUrl}"
                    echo "Using sourceRef: ${sourceRef}"
                    echo "Using sourceCredentialId: ${sourceCredentialId}"
                  }
                }

                node {
                  stage('Git ls') {
                  script {
                      git branch: sourceRef, credentialsId: sourceCredentialId, url: sourceUrl
                    }
                    sh "ls -lah"
                  }

                  stage('echo') {
                    echo 'Pipeline is running'
                  }
                }
              }
            } catch (err) {
              echo "in catch block"
            echo "Caught: ${err}"
              currentBuild.result = 'FAILURE'
              throw err
            }
      type: JenkinsPipeline
parameters:
  - name: APPLICATION_NAME
    displayName: Application Name
    description: The name for the application
    required: true
    value: hello-openshift-jenkins-ci-cd
  - name: APPLICATION_SOURCE_REPOSITORY_URL
    displayName: Git Repository URL
    description: Git source URI for application
    required: true
    value: 'https://github.com/jovemfelix/hello-openshift-jenkins-ci-cd.git'
  - name: APPLICATION_SOURCE_REPOSITORY_REF
    displayName: Git Ref
    description: The name of the Branch/Tag
    required: true
    value: master
  - name: APPLICATION_SOURCE_CREDENTIAL_ID
    displayName: Source Secret Name
    description: Secret with credentials for pulling your source code. (See)[https://docs.openshift.org/latest/dev_guide/builds/build_inputs.html#source-clone-secrets]
    required: true
    value: 'certisign-git-ssh-secret'
